<?php


/*
 * Created on Aug 10, 2007
 *
 * To change the template for this generated file go to
 * Window - Preferences - PHPeclipse - PHP - Code Templates
 */
/**
 * Drupal hook for admin form
 * fedora_repository_name is the name of the top level collection this module will query
 * fedora_repository_pid is the name of the top level pid.
 * Stores this info in the drupal variables table.
 * the name and pid can also be passed as url parameters
 */

//include the ir stuff in a seperate file to clean up a little
//module_load_include('php', 'Fedora_Repository', 'ir/irmodule');
function fedora_repository_admin() {
  module_load_include('php', 'Fedora_Repository', 'formClass');
  $adminForm = new formClass();
  return $adminForm->createAdminForm();

}

function fedora_repository_admin_settings_submit($form, $form_values) {
  drupal_set_message("Custom form handler.");
}

/**
 * drupal hook
 * calls the fedora_repositorys_admin form
 */
function fedora_repository_menu() {
  module_load_include('php', 'Fedora_Repository', 'formClass');
  $adminMenu = new formClass();
  return $adminMenu->createMenu();

}


/**
 * drupal hook to show help
 */
function fedora_repository_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description' :
      return t('Grabs a list of items from a collection in drupal ' .
            'that are presented on the home page.');
    case 'node/add#fedora_repository' :
      return t('Use this page to grab a list of items from a fedora collection.');
  }
}
function fedora_repository_purge_object($pid = NULL, $name = NULL) {
  if (!user_access('purge objects and datastreams')) {
    drupal_set_message(t('You do not have access to add a datastream to this object.'), 'error');
    return '';
  }
  if ($pid == NULL) {
    drupal_set_message(t('You must specify an Object pid to purge an object.'), 'error');
    return '';
  }
  $output = t('Are you sure you wish to purge object %name %pid!<br /><b>This cannot be undone</b><br />', array(
        '%name' => $name,
        '%pid' => $pid
  ));
  $output .= drupal_get_form('fedora_repository_purge_object_form', $pid);
  return $output;

}

function fedora_repository_collection_view($pid = NULL, $collection = NULL, $pageNumber = NULL) {
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  global $user;
  if (!fedora_repository_access(OBJECTHELPER :: $VIEW_FEDORA, $pid, $user)) {
    drupal_set_message(t("You do not have access to Fedora Objects within the attempted namespace or access to Fedora denied!"), 'error');
    return ' ';
  }

  $objectHelper = new ObjectHelper();
  if ($pid == NULL) {
    $pid = variable_get('fedora_repository_pid', 'islandora:top');
  }

  $content = '';

  module_load_include('php', 'Fedora_Repository', 'CollectionClass');
  $collectionClass= new CollectionClass();
  $results = $collectionClass->getRelatedItems($pid, NULL);
  $content .= $objectHelper->parseContent($results, $pid, $dsId, $collection, $pageNumber);

  return $content;


}
function fedora_repository_ingest_object( $collection_pid=NULL, $collection_label = NULL, $content_model = NULL ) {
  if ( !user_access( 'ingest new fedora objects' ) ) {
    drupal_set_message( t('You do not have permission to ingest.'), 'error' );
    return '';
  }
  if ( $collection_pid == NULL ) {
    drupal_set_message( t('You must specify an Collection Object pid to ingest an object.'), 'error' );
    return '';
  }
  $output = drupal_get_form( 'fedora_repository_ingest_form', $collection_pid, $collection_label, $content_model );

  return $output;
}

function fedora_repository_ingest_form_submit($form, &$form_state) {
  //  if($form_state['values']['step']<3){
  //    return;
  //  }
  global $base_url;
  module_load_include( 'php', 'Fedora_Repository', 'CollectionClass' );
  module_load_include( 'php', 'Fedora_Repository', 'ContentModel' );
  $collection_pid = $form_state['values']['collection_pid'];
  $collectionHelper = new CollectionClass();
  $content_model_pid = ContentModel::getPidFromIdentifier( $form_state['values']['models'] );
  $content_model_dsid = ContentModel::getDSIDFromIdentifier( $form_state['values']['models'] );
  $formHandler = $collectionHelper->getFormHandler( $content_model_pid, $content_model_dsid);
  $relationship= $collectionHelper->getRelationshipElement($collection_pid);

  $pid = $collectionHelper->getNextPid( $collection_pid, $content_model_dsid );
  global $user;
  $form_state['values']['user_id'] = $user->name;
  $form_state['values']['pid'] = $pid;
  $form_state['values']['content_model_pid']=$content_model_pid;
  $form_state['values']['relationship']=$relationship;
  if ($formHandler==NULL) {
    $form_state['redirect'] = ' ';
  }

  $phpClass = $formHandler['class'];
  $phpMethod = $formHandler['method'];
  $phpFile = $formHandler['file'];
  //  module_load_include('php', 'Fedora_Repository', '$phpFile');
  require_once( drupal_get_path('module', 'Fedora_Repository') . '/' . $phpFile );
  $thisClass = new $phpClass();
  $returnValue = $thisClass->$phpMethod( $form_state['values'] );
  $_SESSION['fedora_ingest_files']='';//empty this variable
  $form_state['storage'] = NULL;
  $form_state['redirect'] = $base_url . "/fedora/repository/$collection_pid";
}

function fedora_repository_ingest_form_validate( $form, &$form_state ) {

  switch ( $form_state['storage']['step'] ) {
    case 1:

      $form_state['storage']['step']++;
      $form_state['rebuild'] = TRUE;
      break;

    case 2:
      // Get the uploaded file.
      /* TODO Modify the validators array to suit your needs.
      This array is used in the revised file_save_upload */
      $validators = array(
      //    'file_validate_is_image' => array(),
      //    'file_validate_image_resolution' => array('85x85'),
      //    'file_validate_size' => array(30 * 1024),
      );

      //                IF ( empty( $form_state['values']['policy'] ) ) {
      //                    $form_state['values']['step']--;
      //                }
      if ( !empty( $_FILES['files']['name']['ingest-file-location']  ) ) {
        $fileObject = file_save_upload('ingest-file-location', $validators);
        //  if (!in_array($fileObject->filemime, $types)) {
        //    drupal_set_message(t('The detected mimetype %s is not supported', array (
        //    '%s' => $fileObject->filemime
        //    )), 'error');
        //    return false;
        //    }

        file_move($fileObject->filepath, 0, 'FILE_EXISTS_RENAME');
        $form_state['values']['ingest-file-location'] = $fileObject->filepath;
        module_load_include('php', 'Fedora_Repository', 'CollectionClass');
        module_load_include('php', 'Fedora_Repository', 'ContentModel');
        module_load_include('php', 'Fedora_Repository', 'mimetype');

        $file=$fileObject->filepath;
        $fullPath=$fileObject->filepath;
        $content_model_pid = ContentModel::getPidFromIdentifier($form_state['values']['models']);
        $content_model_dsid = ContentModel::getDSIDFromIdentifier($form_state['values']['models']);
        $collectionHelper = new CollectionClass();
        $allowedMimeTypes = $collectionHelper->getAllowedMimeTypes( $content_model_pid, $content_model_dsid );

        $mimetype = new mimetype();
        $dformat = $mimetype->getType($file);
        //$dformat = $fileObject->filemime;

        if (!empty($file)) {
          if (!in_array($dformat, $allowedMimeTypes)) {
            drupal_set_message(t('The uploaded files mimetype (' . $dformat . ') is not associated with this Content Model.  The allowed types are ' . implode(' ', $allowedMimeTypes)), 'error');
            file_delete($file);
            $form_state['rebuild'] = TRUE;
          }
          else {
            //run the methods defined in the content model xml
            //    $returnValue = $collectionHelper->getAndDoRules($fullPath, $dformat, $content_model_pid, $content_model_dsid);//follow rules specified in the content model xml file
            $returnValue = $collectionHelper->getAndDoRules($file, $dformat, $content_model_pid, $content_model_dsid);//follow rules specified in the content model xml file

            if (!$returnValue) {
              drupal_set_message(t('Error following Content Model Rules'), 'error');
              $form_state['rebuild'] = TRUE;
            }
          }
        }
      }
      $form_state['rebuild'] = FALSE;
      break;
  }
}

function fedora_repository_ingest_form(&$form_state, $collection_pid, $collection_label = NULL, $content_model = NULL ) {
  module_load_include('php', 'Fedora_Repository', 'formClass');
  //$client = getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
  // For the sake of easily maintaining the module in different core versions create our own form_values variable.
  if (empty( $form_state['storage']['step'] ) ) {
    $form_state['storage']['step'] = 1;
  }
  $ingestForm = new formClass();
  $form_state['storage']['content_model'] = $content_model;
  return $ingestForm->createIngestForm($collection_pid, $collection_label, $form_state);

}

function fedora_repository_purge_object_form(&$form_state, $pid, $collectionPid = NULL) {
  $form['pid'] = array(
        '#type' => 'hidden',
        '#value' => "$pid"
  );

  $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Purge'
        ));
        if ($collectionPid == NULL) {
          $collectionPid = $_SESSION['fedora_collection'];
        }
        //	$form['#redirect'] = "fedora/repository/$collectionPid/";
        return $form;

}

function add_stream( $collection_pid=NULL, $collectionName=NULL ) {
  if ( !user_access( 'ingest new fedora objects' ) ) {
    drupal_set_message( t('You do not have permission to ingest.'), 'error' );
    return '';
  }
  if ( $collection_pid == NULL ) {
    drupal_set_message( t('You must specify an Collection Object pid to ingest an object.'), 'error' );
    return '';
  }
  $output .= drupal_get_form( 'fedora_repository_add_stream_form', $pid);

  return $output;
}

function add_stream_form_submit($form, &$form_state) {

  global $base_url;
  if ($form_state['submit'] == 'OK' ) {
    $form_state['rebuild'] = TRUE;
    return;
  }
  module_load_include('php', 'Fedora_Repository', 'mimetype');
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  module_load_include('php', 'fedora_repository', 'api/fedora_item');
  $pathToModule = drupal_get_path('module', 'Fedora_Repository');

  $file = $form_state['values']['add-stream-file-location'];

  $pid = $form_state['values']['pid'];
  $dsid = $form_state['values']['stream_id'];
  $dsLabel = $form_state['values']['stream_label'] . substr($file, strrpos( $file, '.')); // Add the file extention to the end of the label.;

  $streamUrl = $base_url . '/' . drupal_urlencode($file);

  /*-----------------------------------------------------------------
   * need a better way to get mimetypes
   */
  $mimetype = new mimetype();
  $dformat = $mimetype->getType($file);
  $controlGroup = "M";
  if ($mimetype == 'text/xml') {
    $controlGroup = 'X';
  }
  try {
    $item = new Fedora_Item($pid);
    $item->add_datastream_from_url($streamUrl, $dsid, $dsLabel, $dformat, $controlGroup);

    $object_helper = new ObjectHelper();
    $object_helper->get_and_do_datastream_rules( $pid, $dsid, $file);

    file_delete( $file );


  } catch (exception $e) {
    drupal_set_message(t($e->getMessage()), 'error');
    return;
  }
  $form_state['rebuild'] = TRUE;
  //$form_state['redirect'] = $base_url."/fedora/repository/$pid";
  //	drupal_goto("http://" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);

}

function add_stream_form(&$form_state, $pid) {
  //module_load_module_load_include('hp', ''Fedora_Repository'', 'config', 'fedora_repository', '');
  module_load_include('php', 'Fedora_Repository', 'formClass');
  //$client = getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
  $addDataStreamForm = new formClass();
  return $addDataStreamForm->createAddDataStreamForm($pid, $form_state);;

}

function add_stream_form_validate($form, &$form_state) {

  if ($form_state['clicked_button']['#value'] == 'OK' ) {
    $form_state['rebuild'] = TRUE;
    return;
  }
  $dsid = $form_state['values']['stream_id'];
  $dsLabel = $form_state['values']['stream_label'];
  if (strlen($dsid) > 64) {
    form_set_error('', t('Data Stream ID cannot be more than 64 characters!'));

    return FALSE;
  }
  if (!(preg_match("/^[a-zA-Z]/", $dsid))) {
    form_set_error('', t('Data Stream ID has to start with a letter!'));

    return FALSE;
  }
  if (strlen($dsLabel) > 64) {
    form_set_error('', t('Data Stream Label cannot be more than 64 characters!'));

    return FALSE;
  }
  if (strpos($dsLabel, '/')) {
    form_set_error('', t('Data Stream Label cannot contain a "/"!'));

    return FALSE;
  }
  $validators = array(
  //    'file_validate_is_image' => array(),
  //    'file_validate_image_resolution' => array('85x85'),
  //    'file_validate_size' => array(30 * 1024),
  );

  $fileObject = file_save_upload('add-stream-file-location', $validators);

  // Move the uploaded file to Drupal's files directory.
  file_move($fileObject->filepath, 0, 'FILE_EXISTS_RENAME');
  $form_state['values']['add-stream-file-location'] = $fileObject->filepath;
  // TODO: Add error checking here.
  $form_state['rebuild'] = FALSE;

}

function fedora_repository_purge_stream($pid = NULL, $dsId = NULL, $name = NULL) {
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  global $user;
  if ($pid == NULL || $dsId == NULL) {
    drupal_set_message(t('You must specify an Object pid and DataStream ID to purge a datastream'), 'error');
    return ' ';
  }
  if (!fedora_repository_access(OBJECTHELPER :: $PURGE_FEDORA_OBJECTSANDSTREAMS, $pid, $user)) {
    drupal_set_message(t("You do not have access to Fedora Objects within the attempted namespace or you do not have permission to purge objects."), 'error');
    return ' ';
  }

  $output = t('Are you sure you wish to purge this datastream %name<br />', array(
        '%name' => $name
  ));
  $output .= drupal_get_form('fedora_repository_purge_stream_form', $pid, $dsId);
  return $output;
}

function fedora_repository_purge_object_form_submit($form, &$form_state) {

//  module_load_include('php', 'Fedora_Repository', 'ConnectionHelper');
//  //$client = getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
//  $pid = $form_state['values']['pid'];
//
//  $params = array(
//    "pid" => $pid,
//    "logMessage" => "Purged",
//    "force" => ""
//  );
//  
//  try {
//    $soapHelper = new ConnectionHelper();
//    $client = $soapHelper->getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
//    $object = $client->__soapCall('purgeObject', array(
//        $params
//      )
//    );
//  } catch (exception $e) {
//    drupal_set_message(t($e->getMessage()), 'error');
//    return;
//  }
//  if (empty($collectionPid)) {
//    $collectionPid = $_SESSION['fedora_collection'];
//  }
//  $form_state['redirect'] = "fedora/repository/$collectionPid/";

}

function fedora_repository_purge_stream_form(&$form_state, $pid, $dsId) {
  $form['pid'] = array(
        '#type' => 'hidden',
        '#value' => "$pid"
  );
  $form['dsid'] = array(
    '#type' => 'hidden',
    '#value' => "$dsId"
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Purge')
  );

  return $form;
}

function fedora_repository_purge_stream_form_submit($form, &$form_state) {
  global $base_url;
  module_load_include('php', 'fedora_repository', 'api/fedora_item');
  //$client = getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
  $pid = $form_state['values']['pid'];
  $item = new Fedora_Item($pid);
  $dsid = $form_state['values']['dsid'];
  try {
    $item->purge_datastream($dsid);
  } catch (exception $e) {
    drupal_set_message(t($e->getMessage()), 'error');
  }
  $form_state['redirect'] = $base_url . "/fedora/repository/$pid";
}

function fedora_repository_edit_qdc_page($pid = NULL, $dsId = NULL) {
	//echo "ROSSANO";
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  global $user;
  if ($pid == NULL || $dsId == NULL) {
    drupal_set_message(t('You must specify an Object pid and a Dublin Core DataStream ID to Edit Metadata'), 'error');
    return ' ';
  }
  if (!fedora_repository_access(OBJECTHELPER :: $EDIT_FEDORA_METADATA, $pid, $user)) {
    drupal_set_message(t("You do not have access to Fedora Objects within the attempted namespace or you do not have permission to edit meta data for this object."), 'error');
    return ' ';
  }
  $output = drupal_get_form('fedora_repository_edit_qdc_form', $pid, $dsId);

  return $output;

}



function fedora_repository_edit_qdc_form(&$form_state, $pid, $dsId = NULL) {
	
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  if ($pid == NULL) {
    drupal_set_message(t('You must specify an Object pid!'), 'error');
  }
  global $user;
  if (!fedora_repository_access(OBJECTHELPER :: $EDIT_FEDORA_METADATA, $pid, $user)) {
    drupal_set_message(t("You do not have access to Fedora Objects within the attempted namespace or you do not have permission to edit meta data for this object."), 'error');
    return ' ';
  }

  module_load_include('php', 'Fedora_Repository', 'formClass');
  module_load_include('php', 'Fedora_Repository', 'ConnectionHelper');
  $soapHelper = new ConnectionHelper();
  $client = $soapHelper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
  // Check if there is a custom edit metadata function defined in the content model.
  $object_helper = new ObjectHelper();
  $output = $object_helper->get_edit_datastream_function( $pid, $dsId );
 
  if ( empty( $output ) ) {
    // There is no custom function, so just load the standard QDC form.
    $metaDataForm = new formClass();
    //currently we only edit the dc metadata.  If you defined a custom form with a custom handler you are sol for now.
    return $metaDataForm->createMetaDataForm($pid, $dsId, $client);
  }
  return $output;


}

function fedora_repository_edit_qdc_form_validate($form, &$form_state) {

}

/**
 * Check if there is a custom edit metadata function defined in the content model. If so,
 * call it, if not do the submit action for the standard QDC metadata.  Custom forms will
 * need to implement their own equivalent to the FormClass->updateMetaData function
 *
 * @param array $form
 * @param array $form_state
 * @return
 */
function fedora_repository_edit_qdc_form_submit($form, &$form_state) {

  module_load_include('php', 'Fedora_Repository', 'ConnectionHelper');
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  global $base_url;
  //$client = getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
  $soap_helper = new ConnectionHelper();
  $client = $soap_helper->getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
  $object_helper = new ObjectHelper();
  // Check the content model for a custom edit metadata form submit function.
  
  $return_value = $object_helper->edit_datastream_form_submit_function( $form_state['values']['form_id'], $form_state['values'], $client);
 
  if ( !empty( $return_value ) ) {
  	
    return $return_value;
  }
  module_load_include('php', 'Fedora_Repository', 'formClass');
  $metaDataForm = new formClass();
  $return_value = $metaDataForm->updateMetaData($form_state['values']['form_id'], $form_state['values'], $client);
  $form_state['redirect'] = $base_url . '/fedora/repository/' . $form_state['values']['pid'];
}

/**
 * drupal hook
 * creates a new permission than can be assigned to roles
 */
function fedora_repository_perm() {
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  return array(
    OBJECTHELPER::$VIEW_FEDORA,
    OBJECTHELPER::$EDIT_FEDORA_METADATA,
    OBJECTHELPER::$PURGE_FEDORA_OBJECTSANDSTREAMS,
    OBJECTHELPER::$ADD_FEDORA_STREAMS,
    OBJECTHELPER::$INGEST_FEDORA_OBJECTS,
    OBJECTHELPER::$EDIT_TAGS_DATASTREAM,
  );
}

/**
 * drupal hook
 * determines if a user has access to what they are asking for
 *
 *
 */
function fedora_repository_access($op, $node, $account) {
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  $objectHelper = new ObjectHelper();
  return $objectHelper->fedora_repository_access($op, $node, $account);

}
/**
 * drupal hook
 * Not sure if this is required or not
 */
function fedora_repository_node_info() {
  return array(
    'repository' => array(
      'name' => 'Fedora Repository',
      'base' => 'repository'
    )
  );
}

/**
 *Grabs a stream from fedora sets the mimetype and returns it. $dsID is the
 *datastream id.
 *@param $pid String
 *@param $dsID String
 */
function makeObject($pid, $dsID) {
  if ($pid == NULL || $dsID == NULL) {
    drupal_set_message(t("no pid or dsid given to create an object with!"));
    return ' ';
  }
  global $user;
  if (!fedora_repository_access(OBJECTHELPER :: $VIEW_FEDORA, $pid, $user)) {
    drupal_set_message(t("You do not have access to Fedora Objects within the attempted namespace."), 'error');
    return ' ';
  }

  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  $objectHelper = new ObjectHelper();
  $objectHelper->makeObject($pid, $dsID);
}

/**
 * Sends an ITQL query to the Fedora Resource index (can only communicate with Kowari or mulgara)
 * Reads the pid and datastream id as url parameters.  Queries the collection object for the query
 * if there is no query datastream falls back to the query shipped with the module.
 * @return String
 */
function fedora_repository_get_items($pid = NULL, $dsId = NULL, $collection = NULL, $pageNumber = NULL, $limit=NULL) {
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  global $user;
  if (!fedora_repository_access(OBJECTHELPER :: $VIEW_FEDORA, $pid, $user)) {
    drupal_set_message(t("You do not have access to Fedora Objects within the attempted namespace or access to Fedora denied!"), 'error');
    return ' ';
  }

  $objectHelper = new ObjectHelper();
  if ($pid == NULL) {
    $pid = variable_get('fedora_repository_pid', 'islandora:top');
  }
  if ($dsId != NULL && $dsId != '-') { //if we have a dsID return the stream otherwise query for a collection of objects
    //probably should check pid as well here.
    return makeObject($pid, $dsId);
  }

  $content = '';

  module_load_include('php', 'Fedora_Repository', 'CollectionClass');
  $collectionClass= new CollectionClass();
  //if(!isset($pageNumber)){
  //    $pageNumber=0;
  //}
  //if(!isset($limit)){
  //    $limit=20;
  //}
  $offset = $limit*$pageNumber;
  $results = $collectionClass->getRelatedObjects($pid, $limit, $offset, NULL);//updated so we can do paging in query not in xslt
  //$results = $collectionClass->getRelatedItems($pid, null);
  $content .= $objectHelper->parseContent($results, $pid, $dsId, $collection, $pageNumber);
  //the below is for islandlives we should be able to do this in the xslt though
  //$css=$path.'/stylesheets/container-large.css';
  //drupal_add_css($css);
  return $content;

}

function fedora_repository_urlencode_string($str) {
  return htmlentities($str);
}

/**
 * Uses makeobject to get a stream.  Sets the Content Disposition in the header so it suggests a filename
 * and sends it as an attachment.  This should prompt for a download of the object.
 *
 */
function fedora_object_as_attachment($pid, $dsId, $label) {
  global $user;
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');

  if ($pid == NULL || $dsId == NULL) {
    drupal_set_message(t("no pid or dsid given to create an object with!"));
    return ' ';
  }

  $objectHelper = new ObjectHelper();
  $objectHelper->makeObject($pid, $dsId, 1, $label);
}


function fedora_repository_personal_collection($user_id = NULL) {

  global $user;
  $pid = NULL;
  $name = NULL;
  if ($user_id==NULL) {
    $pid=$user->fedora_personal_pid;
    $name = $user->name;
  }
  else {
    $u = user_load(array('uid' => $user_id));
    $pid=$u->fedora_personal_pid;
    $name=$u->name;
  }
  //do security check at fedora_repository_get_items function as it has to be called there in case
  //someone trys to come in a back door.
  return fedora_repository_get_items($pid, NULL, $name . t(' Personal Collection'), NULL);

}

function repository_page($pid = NULL, $dsId = NULL, $collection = NULL, $pageNumber = NULL) {

  //do security check at fedora_repository_get_items function as it has to be called there in case
  //someone trys to come in a back door.
  return fedora_repository_get_items($pid, $dsId, $collection, $pageNumber);

}
//User Stuff************************************************************
//create a object in fedora to act as a collection for the users personal stuff.
//function fedora_repository_user($op, & $edit, & $user) {
//if ($op == 'after_update') {
//	module_load_include('php', ''Fedora_Repository'', 'CollectionClass');
//	$collectionHelper = new CollectionClass();
//	$collectionHelper->createUserCollection($user);
//}
//}

//Search Stuff ********************************************************************
/**
 * Implementation of hook_search().
 * sends a search query to fedora fgsearch which is backed by Lucene
 * In our implementation of Fedora we have api-a and api-m locked down
 * to authorized users but at the object level.  We can query Lucene and the
 * RI index to get a list of results without authorization but to view any
 * datastreams users must be authorized.
 *
 */
function fedora_repository_search($op = 'search', $keys = NULL) {
  module_load_include('php', 'Fedora_Repository', 'ObjectHelper');
  module_load_include('inc', 'Fedora_Repository', 'api/fedora_utils');

  switch ($op) {
    case 'name':
      if (user_access('view fedora collection')) {
        return t('Digital Repository', array('-9'));
      }
    case 'search':
      if (user_access('view fedora collection')) {

        //demo search string ?operation=gfindObjects&indexName=DemoOnLucene&query=fgs.DS.first.text%3Achristmas&hitPageStart=11&hitPageSize=10
        $resultData = NULL;
        $numberOfHitsPerPage = NULL;
        $index = strpos($keys, '.');
        $test = substr($keys, 0, $index +1);
        $type = NULL;
        if ($index > 0) {
          $index = strpos($keys, ':');
          $type = substr($keys, 0, $index);
          $keys = substr($keys, $index +1);
        }

        $index = strpos($keys, ':');
        $startPage = substr($keys, 0, $index);
        if ($index > 1) {
          $keys = substr($keys, $index +1);
        }

        if (!$startPage) {
          $startPage = 1;
        }

        $xmlDoc = NULL;

        $path = drupal_get_path('module', 'Fedora_Repository');
        $xmlDoc = new DomDocument();
        $xmlDoc->load($path . '/searchTerms.xml');
        $nodeList = $xmlDoc->getElementsByTagName('default');
        if (!$type) {
          //$type = 'dc.description';
          $type = $nodeList->item(0)->nodeValue;

        }
        $nodeList = $xmlDoc->getElementsByTagName('number_of_results');
        $numberOfHitsPerPage = $nodeList->item(0)->nodeValue;

        $indexName = variable_get('fedora_index_name', 'DemoOnLucene');
        $keys = htmlentities(urlencode($keys));
        $searchQuery = NULL;
        if (isset($type) && strcmp($type, ':')) {
          $searchQuery = $type . ':' . $keys;
        }
        else {
          $searchQuery = $keys;
        }
        //$searchQuery.=" AND (PID:vre OR PID:vre:ref OR PID:demo OR PID:changeme)";

        $searchUrl = variable_get('fedora_fgsearch_url', 'http://localhost:8080/fedoragsearch/rest');
        $searchString = '?operation=gfindObjects&indexName=' . $indexName . '&restXslt=copyXml&query=' . $searchQuery;
        $searchString .= '&hitPageSize=' . $numberOfHitsPerPage . '&hitPageStart=' . $startPage;
        //$searchString = htmlentities(urlencode($searchString));
        $searchUrl .= $searchString;
        $objectHelper = new ObjectHelper();
        $resultData = do_curl($searchUrl);

        $results[] = array(
          array(
            'data' => $resultData,
            'colspan' => 2
          )
        );
        return $results;
      }
  } // switch ($op)

}

/**
 * Implementation of hook_search_page().
 * Display the search results
 */
function fedora_repository_search_page($resultData) {
  $path = drupal_get_path('module', 'Fedora_Repository');
  $proc = NULL;
  if (!$resultData[0][0]['data']) {
    return ''; //no results
  }
  $text=$resultData[0][0]['data'];

  try {
    $proc = new XsltProcessor();
  } catch (Exception $e) {
    $out[] = array(
      array(
        'data' => $e->getMessage(),
        'colspan' => 2
      )
    );
    return $out;
  }

  //inject into xsl stylesheet
  $proc->setParameter('', 'searchToken', drupal_get_token('search_form')); //token generated by Drupal, keeps tack of what tab etc we are on
  $proc->setParameter('', 'searchUrl', url('search') . '/fedora_repository'); //needed in our xsl
  $proc->setParameter('', 'objectsPage', base_path());
  $proc->setParameter('', 'allowedPidNameSpaces', variable_get('fedora_pids_allowed', 'demo: changeme:'));
  $proc->registerPHPFunctions();
  $xsl = new DomDocument();
  $xsl->load($path . '/xsl/results.xsl');
  $input = new DomDocument();
  $didLoadOk = $input->loadXML($resultData[0][0]['data']);

  if (!$didLoadOk) {

    $results[] = array(
      array(
        'data' => 'Error Parsing Results',
        'colspan' => 2
      )
    );
  }
  else {
    $xsl = $proc->importStylesheet($xsl);
    $newdom = $proc->transformToDoc($input);

    $results[] = array(
      array(
        'data' => $newdom->saveXML(),
        'colspan' => 2
      )
    );
  }

  $header = array(
    array(
      'data' => t('Collection Results'),
      NULL
    ),
    (NULL)
  );

  $output .= theme('table', $header, $results);
  return $output;
}

/**
 * Implementation of hook_form_alter().
 * allows the advanced search form in drupal
 */
function fedora_repository_form_alter(&$form, &$form_state, $form_id) {
  // Advanced node search form
  module_load_include('php', 'Fedora_Repository', 'SearchClass');
  $path = drupal_get_path('module', 'Fedora_Repository');
  if ($form_id == 'search_form' && arg(1) == 'fedora_repository' && user_access('use advanced search')) {
    // Keyword boxes:
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array(
         'class' => 'search-advanced'
      ),
    );
    $form['advanced']['keywords'] = array(
      '#prefix' => '<div class="criterion">',
      '#suffix' => '</div>',
    );
    $xmlDoc = new DomDocument();
    $xmlDoc->load($path . '/searchTerms.xml');
    $nodeList = $xmlDoc->getElementsByTagName('term');
    $searchClass = new SearchClass();
    $types = $searchClass->get_search_terms_array();

    $form['advanced']['type'] = array(
      '#type' => 'select',
      '#title' => t('Choose a field to search'),
      '#prefix' => '<div class="criterion">', '#suffix' => '</div>', '#options' => $types,
    );
    $form['advanced']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Advanced search'),
      '#prefix' => '<div class="action clear-block">', '#suffix' => '</div>',
    );

    $form['#validate'][] = 'fedora_repository_search_validate';
  }
}

/**
 * Implementation of hook_search_validate()
 *
 */
function fedora_repository_search_validate($form, &$form_state) {
  // Initialise using any existing basic search keywords.
  $keys = $form_state['values']['processed_keys'];

  if (isset ($form_state['values']['type'])) {

    $type = $form_state['values']['type'];

    if ($type) {
      $keys = $type . ':' . $keys;
    }

  }

  if (!empty ($keys)) {
    form_set_value($form['basic']['inline']['processed_keys'], trim($keys), $form_state); //set the form string
  }

}

function fedora_repository_block($op = 'list', $delta = 0, $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
      	$blocks	[0] = array(
        'info'       => t('Repository Advanced Search Block'),
      );

      return $blocks;
    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array();
      if ($delta == 0) {
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
       $form['fedora_repository_advanced_block_repeat'] = array(
          '#type' => 'textfield',
          '#title' => t('Number of times to repeat search fields'),
          '#size' => 5,
          '#description' => t('The number of times you would like the search blocks to be repeated'),
          '#default_value' => variable_get('fedora_repository_advanced_block_repeat', t('3')),
        );
        $form['fedora_repository_advanced_block_hist'] = array(
          '#type' => 'textfield',
          '#title' => t('Number of hits per page'),
          '#size' => 5,
          '#description' => t('The number of hits you would like the search blocks shows'),
          '#default_value' => variable_get('fedora_repository_advanced_block_hist', t('10')),
        );
      }
      return $form;
    case 'save':
      // If $op is "save", we need to save settings from the configuration form.
      // Since the first block is the only one that allows configuration, we
      // need to check $delta to make sure we only save it.
      if ($delta == 0) {
        // Have Drupal save the string to the database.
        variable_set('fedora_repository_advanced_block_repeat', $edit['fedora_repository_advanced_block_repeat']);
        variable_set('fedora_repository_advanced_block_hist', $edit['fedora_repository_advanced_block_hist']);
      }
      return;
    case 'view': default:
      // If $op is "view", then we need to generate the block for display
      // purposes. The $delta parameter tells us which block is being requested.
      switch ($delta) {
        case 0:
          // The subject is displayed at the top of the block. Note that it
          // should be passed through t() for translation.
          $block['subject'] = t('Repository Advanced Search');
          // The content of the block is typically generated by calling a custom
          // function.

          $block['content'] = drupal_get_form('fedora_repository_mnpl_advanced_search_form');
          break;

      }
      return $block;
  }
}
function fedora_repository_theme() {
return array(
    'fedora_repository_mnpl_advanced_search_form' => array(
      'arguments' => array('form' => NULL)
    )
  );
}
//gets a list of terms from a lucene index
function fedora_repository_list_terms($field, $startTerm=NULL, $displayName=NULL) {
  module_load_include('php', 'Fedora_Repository', 'SearchClass');
  $searchClass = new SearchClass();
  return $searchClass->getTerms($field, $startTerm, $displayName);
}

function fedora_repository_mnpl_advanced_search_form() {
  module_load_include('php', 'Fedora_Repository', 'SearchClass');
  $searchClass = new SearchClass();
  return $searchClass->build_advanced_search_form();
}

function theme_fedora_repository_mnpl_advanced_search_form($form) {
    module_load_include('php', 'Fedora_Repository', 'SearchClass');
    $advanced_search_form = new SearchClass();
    return $advanced_search_form->theme_advanced_search_form($form);

}

function fedora_repository_mnpl_advanced_search($query, $startPage=1) {
  module_load_include('php', 'Fedora_Repository', 'SearchClass');
  $searchClass = new SearchClass();
  return $searchClass->custom_search($query, $startPage);
}

//function fedora_repository_epistemetec_search($query, $startPage=1) {
//  module_load_include('php', 'Fedora_Repository', 'SearchClass');
//  $searchClass = new SearchClass();
//  return $searchClass->custom_search($query, $startPage);
//}

function fedora_repository_mnpl_advanced_search_form_submit($form, &$form_state) {
	
  $type_id = $form_state['values']['type'];
  $repeat = variable_get('fedora_repository_advanced_block_repeat',  t('3'));
  $searchString = $form_state['values']['type1'] . ':' . $form_state['values']['fedora_terms1'];
  if ($form_state['values']['fedora_terms2']!='') {
    $searchString .='+' . $form_state['values']['andor1'] . '+' . $form_state['values']['type2'] . ':' . $form_state['values']['fedora_terms2'] ;
  }
  if ($repeat>2 && $repeat < 9) {
    for ($i=3;$i<$repeat+1;$i++) {
      $t=$i-1;
      if ($form_state['values']["fedora_terms$i"]!='') {
        $searchString .= '+' . $form_state['values']["andor$t"] . '+' . $form_state['values']["type$i"] . ':' . $form_state['values']["fedora_terms$i"] ;
      }
    }
  }
  drupal_goto("fedora/repository/mnpl_advanced_search/$searchString");
}

/*function fedora_repository_mnpl_advanced_search($query) {
  module_load_include('php', 'Fedora_Repository', 'SearchClass');
  $searchClass = new SearchClass();
  return $searchClass->custom_search($query);
}*/

function fedora_repository_install_demos_page() {

  $output = drupal_get_form('fedora_repository_demo_objects_form');

  return $output;
}

function fedora_repository_demo_objects_form() {
  module_load_include( 'php', 'fedora_repository', 'ObjectHelper' );
  module_load_include( 'php', 'fedora_repository', 'api/fedora_item' );
  $form = array();
  $existing_demos = array();

  $form['install_demos'] = array(
    '#title' => t('Islandora Demo Collections'),
    '#type'  => 'fieldset',
    '#description' => t('Install demo image and document collections and content models.'),
  );
  $demo_objects = array();
  // Check if the top-level islandora collection exists. If not, display a button to ingest.

  $form['install_demos']['demo_collections'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Collections to ingest'),
    '#options' => array(),
    '#description' => t('Choose which demo collections you would like ingested into the repository.'),
  );


  foreach (array(
        'islandora:collectionCModel' => 'Islandora default content models',
        'islandora:top' => 'Islandora top-level collection',
        'islandora:demos' => 'Islandora demos collection',
       // 'ilives:bunbury' => 'Example Book from <a href="http://islandlives.ca">Island Lives</a> project'
      )
      as $available_demo => $available_demo_desc) {
    try {
      $demo_objects[$available_demo] = new Fedora_Item( $available_demo );
    } catch ( exception $e ) {

    }

    if (empty($demo_objects[$available_demo]->object_profile)) {
       //The demo objects collection does not exist in the repository, display a button to ingest them.
      $form['install_demos']['demo_collections']['#options'][$available_demo] = $available_demo_desc;
    }
    else {
      array_push( $existing_demos, $demo_objects[$available_demo] );
    }
  }

  // Check if the SmileyStuff collectoin exists, and if it has a COLLECTION_VIEW datastream. If it doesn't then we can add it.

  $smiley_stuff = new Fedora_Item( 'demo:SmileyStuff' );
  if (!empty($smiley_stuff->object_profile)) {
    $datastreams_list = $smiley_stuff->get_datastreams_list_as_array();
    if (empty($datastreams_list['COLLECTION_VIEW']) ||  !$datastreams_list['COLLECTION_VIEW'] == NULL) {
      $form['install_demos']['demo_collections']['#options']['demo:SmileyStuff'] = 'Add Islandora Collection View to Fedora Smiley Stuff Collection';
    }
    else {
      $demo_objects['demo:SmileyStuff'] = $smiley_stuff;
    }
  }
  else {
    $form['install_demos']['smileynote'] = array(
      '#value' => '<p>If you install the <a href="http://www.fedora-commons.org/documentation/3.0b1/userdocs/distribution/installation.html#running.demo">Fedora demo objects</a> Islandora can display them as a collection.'
    );
  }


  if ( !empty( $form['install_demos']['demo_collections']['#options'] ) ) {
    $form['install_demos']['ingest'] = array(
      '#type' => 'submit',
      '#name' => 'install_demos',
      '#value' => 'Install Selected Demos',
    );
  }

  $links_to_existing_demos = '<ul>';
 if(!empty($existing_demos)){
  foreach ( $existing_demos as $pid => $demo_object) {
    $links_to_existing_demos .= '<li><a href="' . $demo_object->url() . '">' . $demo_object->pid . '</a></li>';
  }
 }

  $links_to_existing_demos .= '</ul>';

  $form['install_demos']['existing'] = array(
    '#value' => '<p>Demo collections already installed in this repository:</p>' . $links_to_existing_demos,
  );

  return $form;
}

function fedora_repository_demo_objects_form_submit( $form, &$form_state ) {
  module_load_include('php', 'Fedora_Repository', 'api/fedora_item');
  module_load_include('php', 'fedora_repository', 'api/dublin_core');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  if ( $form_state['clicked_button']['#name'] == 'install_demos' ) {

    if ( !empty( $form_state['values']['demo_collections']['islandora:collectionCModel'] ) ) {
      try {
        $collectioncm = Fedora_Item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/islandora-collectionCModel.xml');
        $collectioncm->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/content_models/COLLECTIONCM.xml', 'ISLANDORACM', 'Islandora Content Model.xml', 'application/xml', 'X');
      } catch ( exception $e ) {

      }
      try {
        $strictpdfcm = Fedora_Item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/islandora-strictpdfCModel.xml' );
        $strictpdfcm->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/content_models/STRICT_PDFCM.xml', 'ISLANDORACM', 'Islandora Content Model.xml', 'application/xml', 'X' );
      } catch ( exception $e ) {

      }
      try {
        //$standardjpgcm = Fedora_Item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/islandora-strictpdfCModel.xml' );
        //$standardjpgcm->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/content_models/STRICT_PDFCM.xml', 'ISLANDORACM', 'Islandora Content Model.xml', 'application/xml', 'X' );
      } catch ( exception $e ) {

      }

      // Install a collection object that points to all content model objects
      try {
        $cmodel_collection_xml = Fedora_Item::create_object_FOXML('islandora:ContentModelCollection');
        $cmodel_collection = Fedora_Item::ingest_from_FOXML($cmodel_collection_xml);

        //$dc = new Dublin_Core(new Fedora_Item('islandora:ContentModelCollection'));
        $dc = new Dublin_Core($cmodel_collection);
        $dc->set_element('dc:title', array('Installed Content Model'));
        $dc->save();
        $cmodel_collection->add_datastream_from_string('select $object $title from <#ri>
                             where ($object <dc:title> $title
                             and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ContentModel-3.0>
                             or $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/islandora:ContentModelsCollection>)
                             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
                             order by $title', 'QUERY', 'Content Model Collection Query', 'text/plain');

        $cmodel_collection->add_relationship('isMemberOfCollection', 'islandora:top');
        $cmodel_collection->add_relationship('hasModel', 'islandora:collectionCModel', FEDORA_MODEL_URI);
        $cmodel_collection->add_datastream_from_file(drupal_get_path('module', 'fedora_repository').'/collection_views/simple_list_view.xml', 'COLLECTION_VIEW', 'Collection View', 'text/xml', 'X');
        $cmodel_collection->add_datastream_from_file(drupal_get_path('module', 'fedora_repository').'/images/contentModel.jpg', 'TN', 'Thumbnail', 'image/jpg', 'M');
      } catch ( exception $e ) {

      }
    }

    if (!empty($form_state['values']['demo_collections']['islandora:top'])) {
      $new_item = fedora_item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/islandora-top.xml' );
      $cp = $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/collection_policies/COLLECTION-COLLECTION POLICY.xml', 'COLLECTION_POLICY', 'Collection Policy', 'text/xml', 'X' );
      try {
        //$cm = fedora_item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/islandora-collectionCModel.xml' );
        $tn = $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/images/Gnome-emblem-photos.png', 'TN', 'Thumbnail.png', 'image/png', 'M' );
      } catch (exception $e) {

      }
    }

    if ( !empty( $form_state['values']['demo_collections']['islandora:demos'] ) ) {
      $new_item = fedora_item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/islandora-demos.xml' );
      $cp = $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/collection_policies/COLLECTION-COLLECTION POLICY.xml', 'COLLECTION_POLICY', 'Collection Policy', 'text/xml', 'X' );
//      $cv = $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ).'/collection_views/COLLECTION_VIEW.xml', 'COLLECTION_VIEW', 'Collection View.xml', 'text/xml', 'X' );
      $tn = $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/images/Gnome-emblem-photos.png', 'TN', 'Thumbnail.png', 'image/png', 'M' );
      try {
        $new_item = Fedora_Item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/islandora-pdfcollection.xml' );
        $tn = $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/images/Crystal_Clear_mimetype_pdf.png', 'TN', 'Thumbnail.png', 'image/png', 'M' );
        $new_item = Fedora_Item::ingest_from_FOXML_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/foxml/freeculturepdf.xml' );
      } catch (exception $e) {

      }
    }

    if ( !empty( $form_state['values']['demo_collections']['demo:SmileyStuff'] ) ) {
      $smiley_stuff = new Fedora_Item( 'demo:SmileyStuff' );
      $new_item = $smiley_stuff->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/collection_views/SmileyStuff-COLLECTION_VIEW.xml', 'COLLECTION_VIEW', 'Collection View', 'text/xml', 'X' );
      $smiley_stuff->add_relationship( 'isMemberOfCollection', 'info:fedora/islandora:demos' );
      $tn = $smiley_stuff->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/images/smileytn.png', 'TN', 'Thumbnail.png', 'image/png', 'M' );
      $cp = $smiley_stuff->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/collection_policies/JPG-COLLECTION POLICY.xml', 'COLLECTION_POLICY', 'Collection Policy.xml', 'application/xml', 'X' );
      $cm = new Fedora_Item( 'demo:DualResImage' );
      try{
        $cmstream = $cm->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository') . '/content_models/STANDARD JPG.xml', 'ISLANDORACM', 'Content Model.xml', 'application/xml', 'X' );
      } catch (exception $e ) {

      }
    }

    if ( !empty( $form_state['values']['demo_collections']['ilives:bunbury'] ) ) {
      Fedora_Item::ingest_from_FOXML_files_in_directory( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/bunbury_foxml' );
      $new_item = new Fedora_Item( 'ilives:bunbury' );
      $new_item->add_relationship( 'info:fedora/fedora-system:def/relations-external#isMemberOfCollection', 'info:fedora/islandora:demos' );
      try {
        $new_item->add_datastream_from_url( 'http://blade2.vre.upei.ca/ilives/215258_jpg/bunbury/215258_CoverTN.jpg', 'TN', 'Cover Thumbnail.jpg', 'image/jpeg', 'M' );
        $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/bunbury_foxml/ilives_bunbury_query.txt', 'QUERY', 'Collection ITQL Query', 'text/plain', 'M');
        $new_item->add_datastream_from_file( drupal_get_path( 'module', 'Fedora_Repository' ) . '/installer_files/bunbury_foxml/bunbary_sparql_to_html.xsl', 'COLLECTION_VIEW', 'Collection View', 'application/xml', 'X');
      } catch ( exception $e ) {

      }
    }

    if ($new_item) {
      drupal_set_message( 'Object ingested successfully' );
    }
  }
}